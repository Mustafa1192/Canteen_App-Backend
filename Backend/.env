PORT=5000
MONGODB_URI=mongodb+srv://mustafakhan31499:cNG8NPtbhNaY5ieh@cluster1.cye9d.mongodb.net/Canteen_app?retryWrites=true&w=majority&appName=Cluster1
EMAIL=mustafakhan31499@gmail.com
EMAIL_PASSWORD=nyuv qdzf sgco hegy
# Db_Password=cNG8NPtbhNaY5ieh 


# // ///////////////////////////////////// Complete Registration, Login & Forgot Password Process /////////////////////////////////////////////////////////////

# // const express = require('express');
# // const mongoose = require('mongoose');
# // const bodyParser = require('body-parser');
# // const cors = require('cors');
# // const nodemailer = require('nodemailer');
# // const crypto = require('crypto');
# // const bcrypt = require('bcrypt');

# // const app = express();
# // const PORT = 5000;
# // const MONGODB_URI = 'mongodb+srv://onemenuit:zW2OhyjeFcXgDGu0@cluster0.p6bpt.mongodb.net/OneMenu_App?retryWrites=true&w=majority';

# // // Middleware
# // app.use(cors());
# // app.use(bodyParser.json());

# // // Connect to MongoDB
# // mongoose.connect(MONGODB_URI, {
# //   useNewUrlParser: true,
# //   useUnifiedTopology: true,
# // });

# // // Main User Schema
# // const userSchema = new mongoose.Schema({
# //   username: { type: String, required: true, unique: true },
# //   email: { type: String, required: true, unique: true },
# //   password: { type: String },
# // }, { collection: 'User', timestamps: true });

# // const User = mongoose.model('User', userSchema);

# // // TempUser Schema (For OTP and Forgot Password)
# // const tempUserSchema = new mongoose.Schema({
# //   email: { type: String, required: true, unique: true },
# //   otp: { type: String },
# //   otpExpires: { type: Date },
# // }, { collection: 'TempUser', timestamps: true });

# // const TempUser = mongoose.model('TempUser', tempUserSchema);

# // // Nodemailer Configuration
# // const transporter = nodemailer.createTransport({
# //   service: 'gmail',
# //   auth: {
# //     user: 'onemenu.it@gmail.com',
# //     pass: 'euwo vymq gdxb jsmf',
# //   },
# // });

# // // // Route to handle OTP generation (Step 1)
# // app.post('/send-otp', async (req, res) => {
# //   const { username, email } = req.body;

# //   try {
# //     // Check if user already exists in Main User collection
# //     const existingUser = await User.findOne({ email });
# //     if (existingUser) {
# //       return res.status(400).json({ message: 'User already exists!' });
# //     }

# //     // Check for existing TempUser
# //     let tempUser = await TempUser.findOne({ email });

# //     // Generate new OTP
# //     const otp = crypto.randomInt(100000, 999999).toString();

# //     if (tempUser) {
# //       tempUser.otp = otp;
# //       tempUser.otpExpires = Date.now() + 60000; // 1-minute expiry
# //       await tempUser.save();
# //     } else {
# //       tempUser = new TempUser({ username, email, otp, otpExpires: Date.now() + 60000 });
# //       await tempUser.save();
# //     }

# //     // Send OTP via email
# //     const mailOptions = {
# //       from: 'onemenu.it@gmail.com',
# //       to: email,
# //       subject: 'Your OTP for AIKTC OneMenu App – Verify Your Registration',
# //       text: `Dear ${username},

# // Thank you for signing up with **AIKTC OneMenu App**!

# // To complete your registration and secure your account, please enter the One-Time Password (OTP) below within the next 60 seconds:

# // **OTP:** ${otp}

# // If you did not request this registration, please ignore this email. Your account will remain unaffected.

# // For your security, do not share your OTP with anyone.

# // If you face any issues or have questions, feel free to reach out to us at:  
# // **onemenu.it@gmail.com**

# // We’re here to assist you!

# // Best regards,  
# // **The AIKTC OneMenu App Team**

# // ---

# // **Note:** This is an automated email. Please do not reply to this message.`
# //     };

# //     transporter.sendMail(mailOptions, (error, info) => {
# //       if (error) {
# //         return res.status(500).json({ message: 'Error sending OTP email!' });
# //       }
# //       res.status(200).json({ message: 'New OTP sent to your email!' });
# //     });
# //   } catch (error) {
# //     res.status(500).json({ message: 'Server error' });
# //   }
# // });

# // // Route to verify OTP and complete registration (Step 2)
# // app.post('/verify-otp', async (req, res) => {
# //   const { email, otp, password } = req.body;

# //   try {
# //     // Find user in TempUser collection
# //     const tempUser = await TempUser.findOne({ email, otp });

# //     if (!tempUser) {
# //       return res.status(400).json({ message: 'Invalid OTP!' });
# //     }

# //     if (Date.now() > tempUser.otpExpires) {
# //       return res.status(400).json({ message: 'OTP has expired :) ' });
# //     }

# //     // Hash the password
# //     const hashedPassword = await bcrypt.hash(password, 10);

# //     // Transfer user from TempUser to User collection
# //     const newUser = new User({
# //       username: tempUser.username,
# //       email: tempUser.email,
# //       password: hashedPassword
# //     });

# //     await newUser.save();

# //     // Remove the user from TempUser collection
# //     await TempUser.deleteOne({ email });

# //     res.status(200).json({ message: 'Registration successful 👍' });
# //   } catch (error) {
# //     res.status(500).json({ message: 'Server error :)' });
# //   }
# // });

# // // Route to handle Resend OTP
# // app.post('/resend-otp', async (req, res) => {
# //   const { email } = req.body;

# //   try {
# //     // Find user in TempUser collection
# //     const tempUser = await TempUser.findOne({ email });

# //     if (!tempUser) {
# //       return res.status(400).json({ message: 'User not found or already verified!' });
# //     }

# //     // Generate a new OTP
# //     const newOtp = crypto.randomInt(100000, 999999).toString();
# //     tempUser.otp = newOtp;
# //     tempUser.otpExpires = Date.now() + 60000; // New expiry
# //     await tempUser.save();

# //     // Send OTP via email
# //     const mailOptions = {
# //       from: 'onemenu.it@gmail.com',
# //       to: email,
# //       subject: 'Your OTP for AIKTC OneMenu App – Verify Your Registration',
# //       text: `Dear ${username},

# // Thank you for signing up with **AIKTC OneMenu App**!

# // To complete your registration and secure your account, please enter the One-Time Password (OTP) below within the next 60 seconds:

# // **OTP:** ${otp}

# // If you did not request this registration, please ignore this email. Your account will remain unaffected.

# // For your security, do not share your OTP with anyone.

# // If you face any issues or have questions, feel free to reach out to us at:  
# // **onemenu.it@gmail.com**

# // We’re here to assist you!

# // Best regards,  
# // **The AIKTC OneMenu App Team**

# // ---

# // **Note:** This is an automated email. Please do not reply to this message.`
# //     };

# //     transporter.sendMail(mailOptions, (error, info) => {
# //       if (error) {
# //         return res.status(500).json({ message: 'Error sending OTP email!' });
# //       }
# //       res.status(200).json({ message: 'New OTP sent to your email!' });
# //     });
# //   } catch (error) {
# //     res.status(500).json({ message: 'Server error' });
# //   }
# // });

# // // Login Route
# // app.post('/login', async (req, res) => {
# //   const { username, password } = req.body;

# //   try {
# //     const user = await User.findOne({ username });

# //     if (!user) {
# //       return res.status(400).json({ message: 'User not found!' });
# //     }

# //     // Compare the provided password with the hashed password
# //     const isMatch = await bcrypt.compare(password, user.password);
# //     if (!isMatch) {
# //       return res.status(400).json({ message: 'Invalid password!' });
# //     }

# //     res.status(200).json({ message: 'Login successful! 👍', user: user.username });
# //   } catch (error) {
# //     res.status(500).json({ message: 'Server error' });
# //   }
# // });

# // ///////////////////////////////////////// Forgot Password Feature /////////////////////////////////////////////

# // // Route to send OTP for password reset
# // app.post('/forgot-password', async (req, res) => {
# //   const { email } = req.body;

# //   try {
# //     // Check if user exists in Main User collection
# //     const existingUser = await User.findOne({ email });

# //     if (!existingUser) {
# //       return res.status(400).json({ message: 'User not found! Please register first.' });
# //     }

# //     // Generate a new OTP
# //     const otp = crypto.randomInt(100000, 999999).toString();
# //     const otpExpires = Date.now() + 60000; // 1-minute expiry

# //     // Upsert TempUser with OTP
# //     await TempUser.findOneAndUpdate(
# //       { email },
# //       { otp, otpExpires },
# //       { upsert: true, new: true }
# //     );

# //     // Send OTP via email
# //     const mailOptions = {
# //       from: 'onemenu.it@gmail.com',
# //       to: email,
# //       subject: 'Reset Your Password - AIKTC OneMenu App',
# //       text: `Use the OTP ${otp} to reset your password. It is valid for 1 minute.`,
# //     };

# //     transporter.sendMail(mailOptions, (error, info) => {
# //       if (error) {
# //         return res.status(500).json({ message: 'Error sending OTP!' });
# //       }
# //       res.status(200).json({ message: 'OTP sent to your email.' });
# //     });
# //   } catch (error) {
# //     res.status(500).json({ message: 'Server error' });
# //   }
# // });

# // // Route to verify OTP and reset password
# // app.post('/reset-password', async (req, res) => {
# //   const { email, otp, newPassword } = req.body;

# //   try {
# //     // Find the OTP in TempUser collection
# //     const tempUser = await TempUser.findOne({ email, otp });

# //     if (!tempUser) {
# //       return res.status(400).json({ message: 'Invalid or expired OTP!' });
# //     }

# //     if (Date.now() > tempUser.otpExpires) {
# //       return res.status(400).json({ message: 'OTP has expired!' });
# //     }

# //     // Hash the new password
# //     const hashedPassword = await bcrypt.hash(newPassword, 10);

# //     // Update the user's password in the User collection
# //     await User.findOneAndUpdate(
# //       { email },
# //       { password: hashedPassword }
# //     );

# //     // Remove the TempUser entry
# //     await TempUser.deleteOne({ email });

# //     res.status(200).json({ message: 'Password reset successful!' });
# //   } catch (error) {
# //     res.status(500).json({ message: 'Server error' });
# //   }
# // });

# // //////////////////////// Start the server////////////////////////////////
# // app.listen(PORT, () => console.log(`Server running on port ${PORT}`));